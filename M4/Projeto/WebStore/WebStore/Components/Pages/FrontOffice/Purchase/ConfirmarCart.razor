@inject HttpClient Http
@inject PurchaseService PurchaseService
@inject CartService CartService
@inject ProductService ProductService



@page "/confirmar-compra"
@rendermode InteractiveServer

<RadzenDataGrid Data="@orderDetails" AllowVirtualization="true" Style="height:400px"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(DTOProductInfo.FkProduct)" Title="OrderID" />
        <RadzenDataGridColumn Property="@nameof(DTOProductInfo.FkProduct)" Title="ProductID" />
        <RadzenDataGridColumn Property="@nameof(DTOProductInfo.Price)" Title="Unit Price">
            <Template Context="detail">
                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", detail.Price)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(DTOProductInfo.Qtt)" Title="Quantity">
            <Template Context="detail">
                <RadzenButton Icon="remove" Size="ButtonSize.Small" Click="@(async () => await DecreaseQuantity(detail))" />
                @detail.Qtt
                <RadzenButton Icon="add" Size="ButtonSize.Small" Click="@(async () => await IncreaseQuantity(detail))" />
                <RadzenButton Icon="delete" Size="ButtonSize.Small" Click="@(async () => await RemoveItem(detail))" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(DTOProductInfo.Discount)" Title="Discount">
            <Template Context="detail">
                @String.Format("{0}%", detail.Discount * 100)
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    List<DTOProductInfo>? orderDetails;

    protected override async Task OnInitializedAsync()
    {
        List<PurchaseProduct> ListProducts = await CartService.GetCartItemsByUserIDAsync("SsomeUserId");
        List<DTOProductInfo> dtoList = new List<DTOProductInfo>();
        foreach (PurchaseProduct product in ListProducts)
        {
            DTOProductInfo dtoProductInfo = (DTOProductInfo)product;
            dtoList.Add(dtoProductInfo);
        }
        orderDetails = dtoList;
    }

    protected async Task IncreaseQuantity(DTOProductInfo detail)
    {
        detail.Qtt++;
        await ProductService.AddItemToCartAsync("SomeUserId", detail.FkProduct, detail.Qtt);

    }

    protected async Task DecreaseQuantity(DTOProductInfo detail)
    {
        detail.Qtt--;
        await ProductService.AddItemToCartAsync("SomeUserId", detail.FkProduct, detail.Qtt);
    }

    protected async Task RemoveItem(DTOProductInfo detail)
    {
        detail.Qtt = -1;        
        await ProductService.AddItemToCartAsync("SomeUserId", detail.FkProduct, detail.Qtt);
    }
}